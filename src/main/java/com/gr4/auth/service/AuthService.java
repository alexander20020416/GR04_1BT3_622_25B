package com.gr4.auth.service;


import com.gr4.auth.model.Usuario;
import com.gr4.auth.repository.UsuarioRepository;
import com.gr4.auth.util.UsuarioValidator;

/**
 * Servicio de autenticaci√≥n que maneja la l√≥gica de negocio relacionada con usuarios.
 * Cumple con el SRP - Solo se encarga de operaciones de autenticaci√≥n y gesti√≥n de usuarios.
 * Cumple con DIP - Depende de abstracciones (interfaces), no de implementaciones concretas.
 */
public class AuthService {
    
    private final UsuarioRepository usuarioRepository;
    private final UsuarioValidator validator;

    /**
     * Constructor que recibe dependencias inyectadas (DIP)
     * @param usuarioRepository repositorio para persistencia de usuarios
     * @param validator validador de usuarios
     */
    public AuthService(UsuarioRepository usuarioRepository, UsuarioValidator validator) {
        if (usuarioRepository == null || validator == null) {
            throw new IllegalArgumentException("Las dependencias no pueden ser null");
        }
        this.usuarioRepository = usuarioRepository;
        this.validator = validator;
        System.out.println("üîß AuthService: Inicializado con dependencias inyectadas");
    }

    /**
     * Registra un nuevo usuario en el sistema
     * @param usuario el usuario a registrar
     * @return true si el usuario se registr√≥ exitosamente, false si ya existe o es inv√°lido
     */
    public boolean registrarUsuario(Usuario usuario) {
        System.out.println("üîç AuthService: Iniciando registro de usuario: " + 
                          (usuario != null ? usuario.getCorreo() : "NULL"));
        
        if (usuario == null) {
            System.err.println("‚úó AuthService: Usuario es null");
            return false;
        }
        
        System.out.println("üîç AuthService: Validando usuario: " + usuario.getCorreo());
        System.out.println("üîç AuthService: Datos del usuario - Nombre: " + usuario.getNombre() + 
                          ", Correo: " + usuario.getCorreo() + 
                          ", Activo: " + usuario.isActivo());
        
        if (!validator.validarUsuario(usuario)) {
            System.err.println("‚úó AuthService: Validaci√≥n fall√≥ para usuario: " + usuario.getCorreo());
            return false;
        }
        
        System.out.println("‚úì AuthService: Validaci√≥n exitosa, verificando si ya existe...");
        
        // Verificar si el correo ya existe
        if (usuarioRepository.existeCorreo(usuario.getCorreo())) {
            System.err.println("‚úó AuthService: El correo ya est√° registrado: " + usuario.getCorreo());
            return false;
        }
        
        System.out.println("‚úì AuthService: Correo disponible, guardando en repositorio...");
        boolean resultado = usuarioRepository.registrarCorreo(usuario);
        
        if (resultado) {
            System.out.println("‚úÖ AuthService: Usuario guardado exitosamente en repositorio");
            // Verificar que realmente se guard√≥
            Usuario verificacion = usuarioRepository.buscarPorCorreo(usuario.getCorreo());
            if (verificacion != null) {
                System.out.println("‚úÖ AuthService: Verificaci√≥n exitosa - Usuario encontrado despu√©s del registro");
            } else {
                System.err.println("‚ö†Ô∏è AuthService: ADVERTENCIA - Usuario no se encuentra despu√©s del registro");
            }
        } else {
            System.err.println("‚úó AuthService: Fall√≥ al guardar usuario en repositorio");
        }
        
        return resultado;
    }

    /**
     * Verifica si un correo ya est√° registrado
     * @param correo el correo a verificar
     * @return true si el correo est√° registrado, false en caso contrario
     */
    public boolean correoEstaRegistrado(String correo) {
        return usuarioRepository.existeCorreo(correo);
    }

    /**
     * Autentica al usuario verificando sus credenciales
     * @param correo el correo electr√≥nico ingresado
     * @param contrase√±a la contrase√±a ingresada
     * @return el Usuario autenticado si las credenciales son correctas, null en caso contrario
     */
    public Usuario autenticar(String correo, String contrase√±a) {
        System.out.println("üîç AuthService: Intentando autenticar usuario: " + correo);
        
        if (correo == null || contrase√±a == null || 
            correo.trim().isEmpty() || contrase√±a.trim().isEmpty()) {
            System.err.println("‚úó AuthService: Credenciales vac√≠as");
            return null;
        }
        
        Usuario usuario = usuarioRepository.buscarPorCorreo(correo);
        System.out.println("üîç AuthService: Usuario encontrado en repositorio: " + (usuario != null));
        
        if (usuario == null) {
            System.err.println("‚úó AuthService: Usuario no encontrado para correo: " + correo);
            return null;
        }
        
        // Verificar que el usuario est√© activo
        if (!usuario.isActivo()) {
            System.err.println("‚úó AuthService: Usuario inactivo: " + correo);
            return null;
        }

        // Verificar que la contrase√±a coincida
        if (usuario.getContrase√±a().equals(contrase√±a)) {
            System.out.println("‚úì AuthService: Autenticaci√≥n exitosa para: " + correo);
            return usuario;
        }
        
        System.err.println("‚úó AuthService: Contrase√±a incorrecta para: " + correo);
        return null;
    }

    /**
     * Actualiza el nombre del usuario si cumple con las validaciones
     * @param usuario el usuario a actualizar
     * @param nuevoNombre el nuevo nombre a establecer
     * @return true si el nombre se actualiz√≥ correctamente, false si no cumple validaciones
     */
    public boolean actualizarNombre(Usuario usuario, String nuevoNombre) {
        if (usuario == null || !validator.validarLongitudNombre(nuevoNombre)) {
            return false;
        }
        usuario.setNombre(nuevoNombre);
        return true;
    }

    /**
     * Actualiza la contrase√±a del usuario si cumple con las validaciones
     * @param usuario el usuario a actualizar
     * @param nuevaContrase√±a la nueva contrase√±a a establecer
     * @return true si la contrase√±a se actualiz√≥ correctamente, false si no cumple validaciones
     */
    public boolean actualizarContrase√±a(Usuario usuario, String nuevaContrase√±a) {
        if (usuario == null || !validator.validarLongitudContrase√±a(nuevaContrase√±a)) {
            return false;
        }
        usuario.setContrase√±a(nuevaContrase√±a);
        return true;
    }

    /**
     * Desactiva el usuario si est√° activo
     * @param usuario el usuario a desactivar
     * @return true si el usuario se desactiv√≥ correctamente, false si ya estaba inactivo
     */
    public boolean desactivar(Usuario usuario) {
        if (usuario == null || !usuario.isActivo()) {
            return false;
        }
        usuario.setActivo(false);
        return true;
    }

    /**
     * Activa el usuario si est√° inactivo
     * @param usuario el usuario a activar
     * @return true si el usuario se activ√≥ correctamente, false si ya estaba activo
     */
    public boolean activar(Usuario usuario) {
        if (usuario == null || usuario.isActivo()) {
            return false;
        }
        usuario.setActivo(true);
        return true;
    }
    
    /**
     * Limpia todos los usuarios registrados (usado en pruebas)
     */
    public void limpiarUsuarios() {
        System.out.println("üßπ AuthService: Limpiando todos los usuarios");
        usuarioRepository.limpiarCorreos();
        System.out.println("‚úì AuthService: Usuarios limpiados");
    }
    
    /**
     * Obtiene el n√∫mero total de usuarios registrados
     * @return cantidad de usuarios en el sistema
     */
    public int obtenerTotalUsuarios() {
        int total = usuarioRepository.obtenerTotalUsuarios();
        System.out.println("üìä AuthService: Total de usuarios consultado: " + total);
        return total;
    }
}

